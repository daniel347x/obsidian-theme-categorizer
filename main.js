/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ThemeCategorizerModal extends obsidian.FuzzySuggestModal {
    constructor(app, settings) {
        super(app);
        this.DEFAULT_THEME_KEY = "";
        this.DEFAULT_THEME_TEXT = "None";
        this.selectedCategory = null;
        this.previewing = false;
        this.settings = settings;
        //@ts-ignore
        this.bgEl.setAttribute("style", "background-color: transparent");
        this.modalEl.classList.add("theme-categorizer-modal");
    }
    onOpen() {
        var _a;
        super.onOpen();
        // Add category filter UI at top of modal
        this.addCategoryFilter();
        //@ts-ignore
        this.initialTheme = this.app.customCss.theme;
        //@ts-ignore
        const currentIndex = this.getItems().findIndex(theme => theme === this.app.customCss.theme);
        if (currentIndex >= 0) {
            //@ts-ignore
            this.chooser.setSelectedItem(currentIndex);
            //@ts-ignore
            (_a = this.chooser.suggestions[this.chooser.selectedItem]) === null || _a === void 0 ? void 0 : _a.scrollIntoViewIfNeeded();
        }
    }
    onClose() {
        super.onClose();
        if (this.previewing) {
            this.setTheme(this.initialTheme);
        }
    }
    addCategoryFilter() {
        const filterContainer = this.modalEl.createDiv({ cls: 'category-filter' });
        filterContainer.createEl('span', { text: 'Filter: ' });
        // "All" button
        const allBtn = filterContainer.createEl('button', {
            text: 'All',
            cls: this.selectedCategory === null ? 'is-active' : ''
        });
        allBtn.onclick = () => {
            this.selectedCategory = null;
            this.updateCategoryButtons();
            //@ts-ignore
            this.updateSuggestions();
        };
        // Category buttons
        const categories = this.getAllCategories();
        categories.forEach(cat => {
            const btn = filterContainer.createEl('button', {
                text: cat,
                cls: this.selectedCategory === cat ? 'is-active' : ''
            });
            btn.onclick = () => {
                this.selectedCategory = cat;
                this.updateCategoryButtons();
                //@ts-ignore
                this.updateSuggestions();
            };
        });
    }
    updateCategoryButtons() {
        const buttons = this.modalEl.querySelectorAll('.category-filter button');
        buttons.forEach((btn, idx) => {
            btn.classList.remove('is-active');
            if (idx === 0 && this.selectedCategory === null) {
                btn.classList.add('is-active');
            }
            else {
                const categories = this.getAllCategories();
                if (btn.textContent === this.selectedCategory) {
                    btn.classList.add('is-active');
                }
            }
        });
    }
    getAllCategories() {
        const categories = new Set();
        Object.values(this.settings.themeCategories).forEach(cats => {
            cats.forEach(cat => categories.add(cat));
        });
        return Array.from(categories).sort();
    }
    getItems() {
        //@ts-ignore
        let themes = [this.DEFAULT_THEME_KEY, ...Object.keys(this.app.customCss.themes || {}), ...(this.app.customCss.oldThemes || [])];
        // Filter by selected category
        if (this.selectedCategory) {
            themes = themes.filter(theme => {
                if (theme === this.DEFAULT_THEME_KEY)
                    return true;
                const cats = this.settings.themeCategories[theme] || [];
                return cats.includes(this.selectedCategory);
            });
        }
        return themes;
    }
    getItemText(item) {
        if (item === this.DEFAULT_THEME_KEY) {
            return this.DEFAULT_THEME_TEXT;
        }
        // Show categories in theme name
        const cats = this.settings.themeCategories[item] || [];
        if (cats.length > 0) {
            return `${item} [${cats.join(', ')}]`;
        }
        return item;
    }
    onChooseItem(item, evt) {
        this.previewing = false;
        this.setTheme(item);
    }
    setTheme(themeName) {
        //@ts-ignore
        this.app.customCss.setTheme(themeName);
    }
}

const DEFAULT_SETTINGS = {
    themeCategories: {},
    categoryColors: {}
};
class ThemeCategorizerPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addCommand({
                id: 'open-theme-categorizer',
                name: 'Open Theme Categorizer',
                callback: () => new ThemeCategorizerModal(this.app, this.settings).open()
            });
            this.addSettingTab(new ThemeCategorizerSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    getInstalledThemes() {
        //@ts-ignore
        return [...Object.keys(this.app.customCss.themes || {}), ...(this.app.customCss.oldThemes || [])];
    }
    getAllCategories() {
        const categories = new Set();
        Object.values(this.settings.themeCategories).forEach(cats => {
            cats.forEach(cat => categories.add(cat));
        });
        return Array.from(categories).sort();
    }
    addCategoryToTheme(theme, category) {
        if (!this.settings.themeCategories[theme]) {
            this.settings.themeCategories[theme] = [];
        }
        if (!this.settings.themeCategories[theme].includes(category)) {
            this.settings.themeCategories[theme].push(category);
            this.saveSettings();
        }
    }
    removeCategoryFromTheme(theme, category) {
        if (this.settings.themeCategories[theme]) {
            this.settings.themeCategories[theme] = this.settings.themeCategories[theme].filter(c => c !== category);
            if (this.settings.themeCategories[theme].length === 0) {
                delete this.settings.themeCategories[theme];
            }
            this.saveSettings();
        }
    }
}
class ThemeCategorizerSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Theme Categorizer Settings' });
        const themes = this.plugin.getInstalledThemes();
        if (themes.length === 0) {
            containerEl.createEl('p', { text: 'No themes installed.' });
            return;
        }
        themes.forEach(theme => {
            new obsidian.Setting(containerEl)
                .setName(theme)
                .setDesc(this.getCategoriesDesc(theme))
                .addButton(button => button.setButtonText('Manage Categories').onClick(() => this.openCategoryManager(theme)));
        });
    }
    getCategoriesDesc(theme) {
        const cats = this.plugin.settings.themeCategories[theme] || [];
        return cats.length > 0 ? `Categories: ${cats.join(', ')}` : 'No categories';
    }
    openCategoryManager(theme) {
        new CategoryManagerModal(this.app, this.plugin, theme).open();
    }
}
class CategoryManagerModal extends obsidian.Modal {
    constructor(app, plugin, theme) {
        super(app);
        this.plugin = plugin;
        this.theme = theme;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl('h3', { text: `Manage categories for: ${this.theme}` });
        const currentCats = this.plugin.settings.themeCategories[this.theme] || [];
        const catContainer = contentEl.createDiv({ cls: 'category-list' });
        this.renderCategories(catContainer, currentCats);
        contentEl.createEl('h4', { text: 'Add Category' });
        const inputContainer = contentEl.createDiv();
        const input = new obsidian.TextComponent(inputContainer);
        input.setPlaceholder('Category name');
        const addButton = inputContainer.createEl('button', { text: 'Add' });
        addButton.onclick = () => {
            const category = input.getValue().trim();
            if (category) {
                this.plugin.addCategoryToTheme(this.theme, category);
                input.setValue('');
                this.renderCategories(catContainer, this.plugin.settings.themeCategories[this.theme] || []);
            }
        };
    }
    renderCategories(container, categories) {
        container.empty();
        if (categories.length === 0) {
            container.createEl('p', { text: 'No categories assigned', cls: 'muted' });
            return;
        }
        categories.forEach(cat => {
            const catEl = container.createDiv({ cls: 'category-item' });
            catEl.createSpan({ text: cat });
            const removeBtn = catEl.createEl('button', { text: '×', cls: 'category-remove' });
            removeBtn.onclick = () => {
                this.plugin.removeCategoryFromTheme(this.theme, cat);
                this.renderCategories(container, this.plugin.settings.themeCategories[this.theme] || []);
            };
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}

module.exports = ThemeCategorizerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
