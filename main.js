/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ThemeCategorizerModal extends obsidian.FuzzySuggestModal {
    constructor(app, settings, saveSettings) {
        super(app);
        this.DEFAULT_THEME_KEY = "";
        this.DEFAULT_THEME_TEXT = "None";
        this.selectedCategory = null;
        this.previewing = false;
        this.currentPreviewTheme = null;
        // Toggle between arrow preview mode and button preview mode
        this.useButtonPreview = false;
        this.settings = settings;
        this.saveSettings = saveSettings;
        //@ts-ignore
        this.bgEl.setAttribute("style", "background-color: transparent");
        this.modalEl.classList.add("theme-categorizer-modal");
        // Add theme preview on arrow key navigation
        //@ts-ignore
        const originalArrowUpEvent = this.scope.keys.find((key) => key.key === "ArrowUp");
        //@ts-ignore
        const originalArrowDownEvent = this.scope.keys.find((key) => key.key === "ArrowDown");
        const wrapWithPreview = (originalFunc, modal) => {
            return function (e) {
                originalFunc(e, null);
                //@ts-ignore
                const selectedTheme = modal.chooser.values[modal.chooser.selectedItem].item;
                modal.currentPreviewTheme = selectedTheme;
                modal.setTheme(selectedTheme);
                modal.previewing = true;
                modal.refreshSuggestions();
            };
        };
        if (originalArrowUpEvent) {
            originalArrowUpEvent.func = wrapWithPreview(originalArrowUpEvent.func, this);
        }
        if (originalArrowDownEvent) {
            originalArrowDownEvent.func = wrapWithPreview(originalArrowDownEvent.func, this);
        }
    }
    onOpen() {
        var _a;
        super.onOpen();
        // Add category filter UI at top of modal
        this.addCategoryFilter();
        //@ts-ignore
        this.initialTheme = this.app.customCss.theme;
        //@ts-ignore
        const currentIndex = this.getItems().findIndex(theme => theme === this.app.customCss.theme);
        if (currentIndex >= 0) {
            //@ts-ignore
            this.chooser.setSelectedItem(currentIndex);
            //@ts-ignore
            (_a = this.chooser.suggestions[this.chooser.selectedItem]) === null || _a === void 0 ? void 0 : _a.scrollIntoViewIfNeeded();
        }
    }
    onClose() {
        super.onClose();
        if (this.previewing) {
            this.setTheme(this.initialTheme);
        }
        this.currentPreviewTheme = null;
    }
    addCategoryFilter() {
        const filterContainer = this.modalEl.createDiv({ cls: 'category-filter' });
        // Preview mode toggle
        const modeToggle = filterContainer.createEl('button', {
            text: this.useButtonPreview ? '🖱️ Button Preview' : '⌨️ Arrow Preview',
            cls: 'preview-mode-toggle'
        });
        modeToggle.style.marginRight = '12px';
        modeToggle.style.padding = '4px 8px';
        modeToggle.style.fontSize = '12px';
        modeToggle.style.fontWeight = '600';
        modeToggle.onclick = () => {
            this.useButtonPreview = !this.useButtonPreview;
            this.refreshSuggestions();
        };
        filterContainer.createEl('span', { text: 'Filter: ' });
        // "All" button
        const allBtn = filterContainer.createEl('button', {
            text: 'All',
            cls: this.selectedCategory === null ? 'is-active' : ''
        });
        allBtn.onclick = () => {
            this.selectedCategory = null;
            this.updateCategoryButtons();
            //@ts-ignore
            this.updateSuggestions();
        };
        // Category buttons
        const categories = this.getAllCategories();
        categories.forEach(cat => {
            const btn = filterContainer.createEl('button', {
                text: cat,
                cls: this.selectedCategory === cat ? 'is-active' : ''
            });
            btn.onclick = () => {
                this.selectedCategory = cat;
                this.updateCategoryButtons();
                //@ts-ignore
                this.updateSuggestions();
            };
        });
    }
    updateCategoryButtons() {
        const buttons = this.modalEl.querySelectorAll('.category-filter button');
        buttons.forEach((btn, idx) => {
            btn.classList.remove('is-active');
            if (idx === 0 && this.selectedCategory === null) {
                btn.classList.add('is-active');
            }
            else {
                const categories = this.getAllCategories();
                if (btn.textContent === this.selectedCategory) {
                    btn.classList.add('is-active');
                }
            }
        });
    }
    getAllCategories() {
        const categories = new Set();
        Object.values(this.settings.themeCategories).forEach(cats => {
            cats.forEach(cat => categories.add(cat));
        });
        return Array.from(categories).sort();
    }
    getItems() {
        //@ts-ignore
        let themes = [this.DEFAULT_THEME_KEY, ...Object.keys(this.app.customCss.themes || {}), ...(this.app.customCss.oldThemes || [])];
        // Filter by selected category
        if (this.selectedCategory) {
            themes = themes.filter(theme => {
                if (theme === this.DEFAULT_THEME_KEY)
                    return true;
                const cats = this.settings.themeCategories[theme] || [];
                return cats.includes(this.selectedCategory);
            });
        }
        return themes;
    }
    getItemText(item) {
        if (item === this.DEFAULT_THEME_KEY) {
            return this.DEFAULT_THEME_TEXT;
        }
        // Just return theme name - categories rendered separately in renderSuggestion
        return item;
    }
    // Override renderSuggestion to add category management (and optionally preview buttons)
    renderSuggestion(match, el) {
        // Skip buttons for "None" default theme
        if (match.item === this.DEFAULT_THEME_KEY) {
            el.createDiv({ text: this.getItemText(match.item) });
            return;
        }
        // Create container with flexbox layout
        const container = el.createDiv({ cls: 'theme-item-container' });
        container.style.display = 'flex';
        container.style.justifyContent = 'space-between';
        container.style.alignItems = 'center';
        container.style.width = '100%';
        // Left side container (theme name + categories)
        const leftContainer = container.createDiv({ cls: 'theme-item-left' });
        leftContainer.style.flex = '1';
        leftContainer.style.display = 'flex';
        leftContainer.style.flexWrap = 'wrap';
        leftContainer.style.alignItems = 'center';
        leftContainer.style.gap = '6px';
        // Theme name
        const nameEl = leftContainer.createDiv({
            text: this.getItemText(match.item),
            cls: 'theme-item-name'
        });
        nameEl.style.fontWeight = '500';
        // Categories as individual tags
        const cats = this.settings.themeCategories[match.item] || [];
        if (cats.length > 0) {
            const catContainer = leftContainer.createDiv({ cls: 'theme-categories' });
            catContainer.style.display = 'flex';
            catContainer.style.flexWrap = 'wrap';
            catContainer.style.gap = '4px';
            catContainer.style.alignItems = 'center';
            cats.forEach(cat => {
                const catTag = catContainer.createEl('span', {
                    text: cat,
                    cls: 'theme-category-tag'
                });
                catTag.style.fontSize = '11px';
                catTag.style.padding = '2px 6px';
                catTag.style.borderRadius = '3px';
                // Force good contrast - semi-transparent gray that works on light and dark
                catTag.style.backgroundColor = 'rgba(128, 128, 128, 0.25)';
                catTag.style.color = 'rgba(128, 128, 128, 0.9)';
                catTag.style.border = '1px solid rgba(128, 128, 128, 0.3)';
                catTag.style.cursor = 'pointer';
                catTag.style.transition = 'all 0.15s ease';
                catTag.title = `Click to remove "${cat}" category`;
                // Hover effect - red with white text for maximum contrast
                catTag.addEventListener('mouseenter', () => {
                    catTag.style.backgroundColor = '#dc3545';
                    catTag.style.color = '#ffffff';
                    catTag.style.border = '1px solid #dc3545';
                    catTag.textContent = `× ${cat}`;
                });
                catTag.addEventListener('mouseleave', () => {
                    catTag.style.backgroundColor = 'rgba(128, 128, 128, 0.25)';
                    catTag.style.color = 'rgba(128, 128, 128, 0.9)';
                    catTag.style.border = '1px solid rgba(128, 128, 128, 0.3)';
                    catTag.textContent = cat;
                });
                // Click to remove category
                catTag.addEventListener('click', (event) => __awaiter(this, void 0, void 0, function* () {
                    event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    // Remove category
                    this.settings.themeCategories[match.item] =
                        this.settings.themeCategories[match.item].filter(c => c !== cat);
                    yield this.saveSettings();
                    this.refreshSuggestions();
                    new obsidian.Notice(`Removed "${cat}" from ${match.item}`);
                }));
            });
        }
        // Button container
        const buttonContainer = container.createDiv({ cls: 'theme-buttons' });
        buttonContainer.style.display = 'flex';
        buttonContainer.style.gap = '4px';
        // Only show preview button in button preview mode
        if (this.useButtonPreview) {
            // Preview/Apply button - wider and more prominent
            const previewBtn = buttonContainer.createEl('button', {
                cls: 'theme-preview-btn'
            });
            previewBtn.style.cursor = 'pointer';
            previewBtn.style.padding = '4px 12px';
            previewBtn.style.fontSize = '13px';
            previewBtn.style.borderRadius = '4px';
            previewBtn.style.border = '1px solid var(--background-modifier-border)';
            previewBtn.style.transition = 'all 0.15s ease';
            // Check if this theme is currently being previewed
            const isPreviewing = this.currentPreviewTheme === match.item;
            if (isPreviewing) {
                // APPLY mode - clear distinction
                previewBtn.textContent = '✓ Apply';
                previewBtn.title = 'Apply this theme and close';
                previewBtn.style.backgroundColor = '#4CAF50';
                previewBtn.style.color = 'white';
                previewBtn.style.border = '1px solid #4CAF50';
                previewBtn.style.fontWeight = '600';
            }
            else {
                // PREVIEW mode
                previewBtn.textContent = '👁 Preview';
                previewBtn.title = 'Preview this theme';
                previewBtn.style.backgroundColor = 'var(--background-primary)';
                previewBtn.style.color = 'var(--text-normal)';
                previewBtn.style.fontWeight = '400';
            }
            // Hover effect
            previewBtn.addEventListener('mouseenter', () => {
                if (isPreviewing) {
                    previewBtn.style.backgroundColor = '#45a049';
                }
                else {
                    previewBtn.style.backgroundColor = 'var(--background-modifier-hover)';
                }
            });
            previewBtn.addEventListener('mouseleave', () => {
                if (isPreviewing) {
                    previewBtn.style.backgroundColor = '#4CAF50';
                }
                else {
                    previewBtn.style.backgroundColor = 'var(--background-primary)';
                }
            });
            // Click handler for preview/apply button
            previewBtn.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                if (isPreviewing) {
                    // Apply and close
                    this.previewing = false;
                    this.currentPreviewTheme = null;
                    this.setTheme(match.item);
                    this.close();
                }
                else {
                    // Preview this theme
                    this.currentPreviewTheme = match.item;
                    this.setTheme(match.item);
                    this.previewing = true;
                    // Get current scroll position before refresh
                    //@ts-ignore
                    const scrollContainer = this.modalEl.querySelector('.prompt-results');
                    const scrollTop = (scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.scrollTop) || 0;
                    // Find the index of this item in the current list
                    //@ts-ignore
                    const itemIndex = this.chooser.values.findIndex(v => v.item === match.item);
                    // Refresh suggestions to update all button states
                    this.refreshSuggestions();
                    // Restore scroll position and selection
                    if (itemIndex >= 0) {
                        //@ts-ignore
                        this.chooser.setSelectedItem(itemIndex);
                        if (scrollContainer) {
                            scrollContainer.scrollTop = scrollTop;
                        }
                    }
                }
            });
        } // End of button preview mode check
        // Category menu button (three dots) - always visible
        const menuBtn = buttonContainer.createEl('span', {
            text: '⋮',
            cls: 'theme-category-btn'
        });
        menuBtn.style.cursor = 'pointer';
        menuBtn.style.padding = '0 6px';
        menuBtn.style.fontSize = '18px';
        menuBtn.style.opacity = '0.5';
        menuBtn.title = 'Manage categories';
        // Hover effect for menu button
        menuBtn.addEventListener('mouseenter', () => {
            menuBtn.style.opacity = '1';
        });
        menuBtn.addEventListener('mouseleave', () => {
            menuBtn.style.opacity = '0.5';
        });
        // Click handler for menu button
        menuBtn.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            this.showContextMenu(event, match.item);
        });
    }
    showContextMenu(event, themeName) {
        const menu = new obsidian.Menu();
        // Skip context menu for "None" default theme
        if (themeName === this.DEFAULT_THEME_KEY) {
            return;
        }
        const currentCategories = this.settings.themeCategories[themeName] || [];
        const allCategories = this.getAllCategories();
        // Section: Toggle existing categories
        if (allCategories.length > 0) {
            menu.addItem((item) => {
                item.setTitle("Categories:");
                item.setDisabled(true);
            });
            allCategories.forEach(category => {
                const isActive = currentCategories.includes(category);
                menu.addItem((item) => {
                    item
                        .setTitle(`${isActive ? '✓ ' : ''}${category}`)
                        .setIcon(isActive ? 'checkbox-glyph' : 'circle')
                        .onClick(() => __awaiter(this, void 0, void 0, function* () {
                        if (isActive) {
                            // Remove category
                            this.settings.themeCategories[themeName] = currentCategories.filter(c => c !== category);
                        }
                        else {
                            // Add category
                            if (!this.settings.themeCategories[themeName]) {
                                this.settings.themeCategories[themeName] = [];
                            }
                            this.settings.themeCategories[themeName].push(category);
                        }
                        yield this.saveSettings();
                        this.refreshSuggestions();
                    }));
                });
            });
            menu.addSeparator();
        }
        // Add new category
        menu.addItem((item) => {
            item
                .setTitle("Add new category...")
                .setIcon('plus')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                // Close context menu and prompt for new category
                const newCategory = yield this.promptForCategory();
                if (newCategory && newCategory.trim()) {
                    if (!this.settings.themeCategories[themeName]) {
                        this.settings.themeCategories[themeName] = [];
                    }
                    if (!this.settings.themeCategories[themeName].includes(newCategory.trim())) {
                        this.settings.themeCategories[themeName].push(newCategory.trim());
                        yield this.saveSettings();
                        this.refreshSuggestions();
                        new obsidian.Notice(`Added category "${newCategory.trim()}" to ${themeName}`);
                    }
                    else {
                        new obsidian.Notice(`Theme already has category "${newCategory.trim()}"`);
                    }
                }
            }));
        });
        // Remove all categories
        if (currentCategories.length > 0) {
            menu.addSeparator();
            menu.addItem((item) => {
                item
                    .setTitle("Remove all categories")
                    .setIcon('trash')
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.settings.themeCategories[themeName] = [];
                    yield this.saveSettings();
                    this.refreshSuggestions();
                    new obsidian.Notice(`Removed all categories from ${themeName}`);
                }));
            });
        }
        menu.showAtMouseEvent(event);
    }
    promptForCategory() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                const promptModal = new CategoryPromptModal(this.app, (category) => {
                    resolve(category);
                });
                promptModal.open();
            });
        });
    }
    refreshSuggestions() {
        // Refresh the category filter buttons
        const oldFilter = this.modalEl.querySelector('.category-filter');
        if (oldFilter) {
            oldFilter.remove();
        }
        this.addCategoryFilter();
        // Refresh the suggestion list
        //@ts-ignore
        this.updateSuggestions();
    }
    onChooseItem(item, evt) {
        this.previewing = false;
        this.currentPreviewTheme = null;
        this.setTheme(item);
    }
    setTheme(themeName) {
        //@ts-ignore
        this.app.customCss.setTheme(themeName);
    }
}
// Simple modal to prompt for category name
class CategoryPromptModal extends obsidian.Modal {
    constructor(app, onSubmit) {
        super(app);
        this.onSubmit = onSubmit;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h3', { text: 'Add new category' });
        this.inputEl = contentEl.createEl('input', {
            type: 'text',
            placeholder: 'Category name'
        });
        this.inputEl.focus();
        const buttonContainer = contentEl.createDiv({ cls: 'modal-button-container' });
        const submitBtn = buttonContainer.createEl('button', {
            text: 'Add',
            cls: 'mod-cta'
        });
        submitBtn.onclick = () => {
            this.onSubmit(this.inputEl.value);
            this.close();
        };
        const cancelBtn = buttonContainer.createEl('button', { text: 'Cancel' });
        cancelBtn.onclick = () => {
            this.onSubmit(null);
            this.close();
        };
        // Submit on Enter key
        this.inputEl.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                this.onSubmit(this.inputEl.value);
                this.close();
            }
            else if (e.key === 'Escape') {
                this.onSubmit(null);
                this.close();
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

const DEFAULT_SETTINGS = {
    themeCategories: {},
    categoryColors: {}
};
class ThemeCategorizerPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addCommand({
                id: 'open-theme-categorizer',
                name: 'Open Theme Categorizer',
                callback: () => new ThemeCategorizerModal(this.app, this.settings, this.saveSettings.bind(this)).open()
            });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = ThemeCategorizerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
